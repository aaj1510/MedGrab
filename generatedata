{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c963d4b1",
   "metadata": {},
   "source": [
    "Simulation: Code below is part of process (stage 1) to get random number of date points (within user's selection of start and end date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "70a08a1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import random\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "39fa3f7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def str_time_prop(start, end, time_format, prop):\n",
    "    \"\"\"Get a time at a proportion of a range of two formatted times.\n",
    "\n",
    "    start and end should be strings specifying times formatted in the\n",
    "    given format (strftime-style), giving an interval [start, end].\n",
    "    prop specifies how a proportion of the interval to be taken after\n",
    "    start.  The returned time will be in the specified format.\n",
    "    \"\"\"\n",
    "\n",
    "    stime = time.mktime(time.strptime(start, time_format))\n",
    "    etime = time.mktime(time.strptime(end, time_format))\n",
    "\n",
    "    ptime = stime + prop * (etime - stime)\n",
    "\n",
    "    return time.strftime(time_format, time.localtime(ptime))\n",
    "\n",
    "\n",
    "def random_date(start, end, prop):\n",
    "    return str_time_prop(start, end, '%m/%d/%Y %I:%M %p', prop)\n",
    "\n",
    "#fit into mobile app:\n",
    "startdate = '1/1/2008 12:00 AM' #get user input instead of string fr both start & end dates\n",
    "enddate = '1/30/2008 12:00 AM'\n",
    "\n",
    "x = random.randint(2,45) #simulate number of readings taken for date range user selected\n",
    "\n",
    "storevalues = [] #create list\n",
    "\n",
    "#generate date(s) of random data point \n",
    "for i in range(0, x):\n",
    "    store = random_date(startdate, enddate, random.random()) \n",
    "    storevalues.append(store) #append to list\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a452a8ee",
   "metadata": {},
   "source": [
    "Simulation Stage 2: After the user selects a start and end date, sensor data (4 sensors) will be sent to the application, using random int generator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "8d492b28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['01/28/2008 01:24 PM',\n",
       " '01/27/2008 10:31 AM',\n",
       " '01/29/2008 03:37 AM',\n",
       " '01/24/2008 07:55 PM',\n",
       " '01/20/2008 11:12 PM',\n",
       " '01/21/2008 11:29 PM',\n",
       " '01/03/2008 06:44 PM',\n",
       " '01/06/2008 09:52 PM',\n",
       " '01/23/2008 12:54 AM',\n",
       " '01/03/2008 11:04 AM',\n",
       " '01/23/2008 04:57 AM',\n",
       " '01/05/2008 08:55 AM',\n",
       " '01/04/2008 12:13 PM']"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "storevalues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "41b03308",
   "metadata": {},
   "outputs": [],
   "source": [
    "bplist = [] #create list to store blood pressure values\n",
    "hrlist = [] #create list to store heart rate values\n",
    "gluclist = [] #create list to store blood glucose values\n",
    "emglist = [] #create list to store electromyography values\n",
    "\n",
    "for x in storevalues:\n",
    "    #generate for each list(s)\n",
    "    bp = random.randint(100,125)\n",
    "    hr = random.randint(90,140)\n",
    "    gluc = random.randint(100,125)\n",
    "    emg = random.randint(48,61)\n",
    "    \n",
    "    #append to list(s)\n",
    "    bplist.append(bp) \n",
    "    hrlist.append(hr)\n",
    "    gluclist.append(gluc)\n",
    "    emglist.append(emg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "1e585000",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([107, 125, 104, 109, 105, 100, 111, 107, 117, 101, 111, 116, 106],\n",
       " [133, 127, 101, 122, 91, 105, 139, 90, 103, 137, 112, 118, 125],\n",
       " [104, 110, 124, 106, 121, 111, 107, 123, 118, 105, 114, 123, 120],\n",
       " [51, 60, 49, 53, 54, 51, 60, 51, 58, 53, 53, 55, 54])"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bplist,hrlist,gluclist,emglist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "9c9f2d2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(bplist)\n",
    "#len(storevalues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "293e357c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Datetime</th>\n",
       "      <th>Blood_Pressure</th>\n",
       "      <th>Heart_Rate</th>\n",
       "      <th>Blood_Glucose</th>\n",
       "      <th>EMG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01/28/2008 01:24 PM</td>\n",
       "      <td>107</td>\n",
       "      <td>133</td>\n",
       "      <td>104</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01/27/2008 10:31 AM</td>\n",
       "      <td>125</td>\n",
       "      <td>127</td>\n",
       "      <td>110</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>01/29/2008 03:37 AM</td>\n",
       "      <td>104</td>\n",
       "      <td>101</td>\n",
       "      <td>124</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>01/24/2008 07:55 PM</td>\n",
       "      <td>109</td>\n",
       "      <td>122</td>\n",
       "      <td>106</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>01/20/2008 11:12 PM</td>\n",
       "      <td>105</td>\n",
       "      <td>91</td>\n",
       "      <td>121</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>01/21/2008 11:29 PM</td>\n",
       "      <td>100</td>\n",
       "      <td>105</td>\n",
       "      <td>111</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>01/03/2008 06:44 PM</td>\n",
       "      <td>111</td>\n",
       "      <td>139</td>\n",
       "      <td>107</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>01/06/2008 09:52 PM</td>\n",
       "      <td>107</td>\n",
       "      <td>90</td>\n",
       "      <td>123</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>01/23/2008 12:54 AM</td>\n",
       "      <td>117</td>\n",
       "      <td>103</td>\n",
       "      <td>118</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>01/03/2008 11:04 AM</td>\n",
       "      <td>101</td>\n",
       "      <td>137</td>\n",
       "      <td>105</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>01/23/2008 04:57 AM</td>\n",
       "      <td>111</td>\n",
       "      <td>112</td>\n",
       "      <td>114</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>01/05/2008 08:55 AM</td>\n",
       "      <td>116</td>\n",
       "      <td>118</td>\n",
       "      <td>123</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>01/04/2008 12:13 PM</td>\n",
       "      <td>106</td>\n",
       "      <td>125</td>\n",
       "      <td>120</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Datetime  Blood_Pressure  Heart_Rate  Blood_Glucose  EMG\n",
       "0   01/28/2008 01:24 PM             107         133            104   51\n",
       "1   01/27/2008 10:31 AM             125         127            110   60\n",
       "2   01/29/2008 03:37 AM             104         101            124   49\n",
       "3   01/24/2008 07:55 PM             109         122            106   53\n",
       "4   01/20/2008 11:12 PM             105          91            121   54\n",
       "5   01/21/2008 11:29 PM             100         105            111   51\n",
       "6   01/03/2008 06:44 PM             111         139            107   60\n",
       "7   01/06/2008 09:52 PM             107          90            123   51\n",
       "8   01/23/2008 12:54 AM             117         103            118   58\n",
       "9   01/03/2008 11:04 AM             101         137            105   53\n",
       "10  01/23/2008 04:57 AM             111         112            114   53\n",
       "11  01/05/2008 08:55 AM             116         118            123   55\n",
       "12  01/04/2008 12:13 PM             106         125            120   54"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create a dataframe\n",
    "pd.DataFrame(list(zip(storevalues,bplist,hrlist,gluclist,emglist)),\n",
    "              columns=['Datetime','Blood_Pressure','Heart_Rate','Blood_Glucose','EMG'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9a3641e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv(\"specifyurfilepath_todownload\",index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
